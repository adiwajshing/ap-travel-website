openapi: 3.0.1
info:
  title: Staysia (REST API)
  description: >-
    Backend for an E-Travel Project (Ashoka University) in form of a REST API
    architecture.
  version: 1.0.0

servers:
  - url: 'http://127.0.0.1:5000/'
  - url: https://staysia.herokuapp.com/

tags:
  - name: User Endpoints
    description: All User Operations
  - name: Navigation
    description: Navigation routes
  - name: Booking
    description: Booking routes
  - name: Review
    description: Review routes

paths:

  /api/signup:
    post:
      tags: [User Endpoints]
      summary: Register new signup
      description: Creates a new user and sends back the idToken and refreshToken to be used for Bearer Tokens.
      operationId: addUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
                phone_number:
                  type: string
              required:
                - name
                - email
                - password
                - phone_number
      responses:
        '200':
          description: Succesfully added user. Returns access tokens.
          content:
            application/json:
              schema:
                type: object
                properties:
                  idToken:
                    type: string
                  refreshToken:
                    type: string
                required:
                  - idToken
                  - refreshToken
        '400':
          description: Bad Form Input
        '401':
          description: User already exists or Unauthorized

  /api/google-signup:
    put:
      tags: [User Endpoints]
      summary: Add user to DB after Google Signup
      description: Call this route after anyone signs up using Google, in order to register them in the DB.
      operationId: addGUser
      responses:
        '200':
          description: Succesfully added user in DB or user already exists in DB.
      security:
        - Bearer: []

  /api/login:
    post:
      tags: [User Endpoints]
      summary: Login user with email and password (Non-Google)
      description: Logs in user and returns access tokens.
      operationId: login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Succesfully logged in User
          content:
            application/json:
              schema:
                type: object
                properties:
                  idToken:
                    type: string
                  refreshToken:
                    type: string
                required:
                  - idToken
                  - refreshToken
        '400':
          description: Bad Form Input
          content: {}
        '401':
          description: Unauthorized

  /api/logout:
    get:
      tags: [User Endpoints]
      summary: Logout and revoke tokens
      description: Revokes access tokens of user
      operationId: logout
      responses:
        '200':
          description: Succesfully logged out and revoked tokens
      security:
        - Bearer: []

  /api/profile:
    get:
      tags: [User Endpoints]
      summary: View Profile Section
      description: Returns profile details of User
      operationId: viewUser
      responses:
        '200':
          description: Returns Profile
          content:
            application/json:
              schema:
                $ref:  '#/components/schemas/getProfile'
        '401':
          description: Unauthorized
        '404':
          description: User not found
          content: {}
      security:
        - Bearer: []

  /api/profile/:
    patch:
      tags: [User Endpoints]
      summary: Edit Profile Section
      description: Takes in JSON containing edits and sends back entire new profile
      operationId: editUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editProfile'
      responses:
        '200':
          description: Succesfully edited user.
          content:
            application/json:
              schema:
                $ref:  '#/components/schemas/getProfile'
        '400':
          description: Bad JSON Input
          content: {}
        '401':
          description: Unauthorized
      security:
        - Bearer: []
  
  /api/:
    get:
      summary: Homepage data containing info of all tags user can filter by
      description: This returns an object with three keys/categories. Each category (city, stars, tags) should be shown as cards which the user can click on to filter hotels. The displayName in every object is what should be written on/under the card on the frontend while the tag property is the tag you need to filter by. When user clicks a card, take its tag and go to /api/tags/{tag}. If the user has selected a city next to the search bar (like in popular etravel websites- https://www.airbnb.co.in) before clicking a tag, add the city as a query parameter in /api/tags/{tag}. Every card should have the image as the thumbnail link provided with the object. Screenshot of sample site look has been WA messaged.
      operationId: homepage
      tags: [Navigation]
      responses:
        '200':
          description: JSON city data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/homepage'
          
  /api/tags/{tag}:
    get:
      summary: Gets all hotels having some tag and in a city if city provided
      description: Takes a city name and a tag and returns all hotels in the city having tag. Meant for Users who click on a city/star/tag card on the homepage.
      operationId: tagHotels
      tags: [Navigation]
      parameters:
        - name: city
          in: query
          required: false
          schema:
            type: string
            enum:
              - Mumbai
              - Delhi
              - Tokyo
              - Bengaluru
              - Dubai
              - Hong Kong
              - Hyderabad
              - Singapore
              - Pune
          description: City name
        - name: tag
          in: path
          required: true
          schema:
            type: string
          description: tag 
      
      responses:
        '200':
          description: Array of all available hotels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search'
        '400':
          description: Error in parameter
        '404':
          description: No Such City
                
  /api/search:
    get:
      summary: Searches through all hotel names
      description: Returns array of all hits when user presses enter on search bar. 
      operationId: search
      tags: [Navigation]
      parameters:
        - name: city
          in: query
          required: false
          schema:
            type: string
            enum:
              - Mumbai
              - Delhi
              - Tokyo
              - Bengaluru
              - Dubai
              - Hong Kong
              - Hyderabad
              - Singapore
              - Pune
        - name: q
          in: query
          required: true
          description: search term
          schema:
            type: string
        - name: check_In
          in: query
          required: false
          schema:
            type: string
          description: dd/mm/yyyy
        - name: check_Out
          in: query
          required: false
          schema:
            type: string
          description: dd/mm/yyyy
      
      responses:
        '200':
          description: Array of all search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search'
        '204':
          description: No Matches Found
        '400':
          description: Invalid Search Term
        '404':
          description: No Such City
      security:
        - Bearer: []
    
  /api/searchbar:
    get:
      summary: Fuzzy search for search bar
      description: Fast speed search at search bar that returns basic hotel data of hits in an array before the user hits enter.
      operationId: fuzzySearch
      tags: [Navigation]
      parameters:
        - name: q
          in: query
          required: true
          description: search term
          schema:
            type: string
        - name: city
          in: query
          required: false
          schema:
            type: string
            enum:
              - Mumbai
              - Delhi
              - Tokyo
              - Bengaluru
              - Dubai
              - Hong Kong
              - Hyderabad
              - Singapore
              - Pune
      responses:
        '200':
          description: Search data returned to be viewed in search bar dropdown.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fuzzySearch'
        '204':
          description: No Matches Found
        '400':
          description: Invalid Search Term
        '404':
          description: No Such City

  /api/search/tags:
    get:
      summary: Performs fuzzy search through tags
      description: Give user an option to perform an advanced search through tags of hotels and then call this endpoint with the search term.
      operationId: advancedSearch
      tags: [Navigation]
      parameters:
        - name: city
          in: query
          required: false
          schema:
            type: string
            enum:
              - Mumbai
              - Delhi
              - Tokyo
              - Bengaluru
              - Dubai
              - Hong Kong
              - Hyderabad
              - Singapore
              - Pune
          
        - name: q
          in: query
          required: true
          description: search term
          schema:
            type: string
        - name: check_In
          in: query
          required: false
          schema:
            type: string
          description: dd/mm/yyyy
        - name: check_Out
          in: query
          required: false
          schema:
            type: string
          description: dd/mm/yyyy
      
      responses:
        '200':
          description: Array of all search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search'
        '204':
          description: No Matches Found
        '400':
          description: Invalid Search Term
        '404':
          description: No Such City
      security:
        - Bearer: []
      

  /api/hotel/{hotelId}:
    get:
      summary: Get complete hotel details on selection
      description: Meant for individual hotel description page. Mention everything other than the tags, those are for system use.
      operationId: getHotel
      tags: [Navigation]
      parameters:
        - name: hotelId
          in: path
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: Hotel details found and returned as JSON
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/hotelDetails'
        '404':
          description: Hotel Not Found

  /api/hotel/{hotelId}/reccomendations:
    get:
      summary: Gets recommendations for selected hotel
      description: Show this in More Like This contianer when User is looking at details of a hotel using its hotelId. Only to be displayed if user has opened up a particular hotel, not while they are just searching. Use hotelId of hotel they are looking at to call this endpoint.
      operationId: getRecc
      tags: [Navigation]
      parameters:
        - name: hotelId
          in: path
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: Recommendations generated and returned as a general search array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search'
        '404':
          description: Hotel Not Found
      security:
        - Bearer: []
      
  
  /api/profile/bookings:
    get:
      summary: Gets all bookings of the User
      description: Returns and array of every booking.
      operationId: getBookings
      responses:
        '200':
          description: User booking data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getBookings'
        '401':
          description: Unauthorized
      tags:
        - Booking
      security:
        - Bearer: []
    
  /api/profile/bookings/{hotelId}:
    put:
      summary: Add new booking
      description: Takes hotelId from path and JSON of booking details, to return succesfully added booking info. Maybe instead of creating a checkout page make this a modal that takes in all of this information from user before they confirm their booking. The difference between a "booked" status and "reserved" status is that though they take in the same info, the booked ones actually add to the roomsBookedOn property i.e. blocks dates, while reserved allows users to keep rooms on hold. They can change this whenever they want from their booking page by simply sending a request to the PATCH path mentioned below. Please give the option to choose between booking and reserving.
      operationId: addBooking
      tags: [Booking]
      parameters:
        - name: hotelId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addBooking'

      responses:
        '200':
          description: Booking added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/booking'
        '400':
          description: Input JSON error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden Errors
        '404':
          description: Hotel not found
      security:
        - Bearer: []
  
  /api/profile/bookings/{bookingId}:

    delete:
      summary: Delete booking using booking ID
      operationId: Delete booking
      tags: [Booking]
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
        '401':
          description: Unauthorized
        '404':
          description: Hotel Not Found
      security:
        - Bearer: []

    patch:
      summary: Convert reserved booking into confirmed booking using booking ID
      description: 'Takes bookingId from path and returns JSON of new booking after conversion from reserved to booked. Bsically works as a checkout feature and actually blocks the date for a hotel.'
      operationId: editBooking
      tags: [Booking]
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
      security:
        - Bearer: []

      responses:
        '200':
          description: Succesfully booked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/booking'
        '400':
          description: Input JSON error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden Errors
        '404':
          description: Hotel or Booking Not Found
      
  /api/hotel/{hotelId}/review:
    put:
      summary: Add a review to a hotel
      description: Takes in hotel ID in path and review info as JSON, to return changed hotel details (new review array and ratings). Name in the object property is the name of the user while title is a title they need to give to the review. There is a default one so they don't HAVE to give a title.
      operationId: addReview
      tags: [Review]

      parameters:
        - name: hotelId
          in: path
          required: true
          schema:
            type: string
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addReview'
      
      responses:
        '200':
          description: Review succesfully added to hotel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/newReview'
        '400':
          description: No data sent
        '401':
          description: Unauthorized
      security:
        - Bearer: []

components:
  
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
  
  schemas:

    getProfile:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone_number:
          type: string
      required:
        - name
        - email
        - phone_number
    
    editProfile:
      type: object
      properties:
        name:
          type: string
        phone_number:
          type: string

    homepage:
      type: object
      properties:
        cities:
          type: array
          items:
            type: object
            properties:
              displayName:
                  type: string
                  description: Name displayed on frontend
              tag:
                  type: string
                  description: tag parameter to use while searching
              thumbnail:
                  type: string
                  description: URL for thumbnail
            required:
              - displayName
              - name
              - thumbnail
        stars:
          type: array
          items:
            type: object
            properties:
              displayName:
                  type: string
                  description: Name displayed on frontend
              tag:
                type: string
                description: tag parameter to use while searching
              thumbnail:
                type: string
                description: URL for thumbnail
            required:
              - displayName
              - name
              - thumbnail
        tags:
          type: array
          items:
            type: object
            properties:
              displayName:
                  type: string
                  description: Name displayed on frontend
              tag:
                type: string
                description: tag parameter to use while searching
              thumbnail:
                type: string
                description: URL for thumbnail
            required:
              - displayName
              - name
              - thumbnail
    
    search:
      type: array
      items:
        $ref: '#/components/schemas/hotel'

    fuzzySearch:
      type: array
      items:
        type: object
        properties:
          id:
            type: number
          starRating:
            type: number
            maximum: 5
            minimum: 0
          title:
            type: string
            description: 'Hotel Name'
        required:
          - id
          - starRating
          - title
    
    booking:
      type: object
      properties:
        bookingDetails:
          type: object
          properties:
            bookingName:
              type: string
            check_In:
              type: string
            check_Out:
              type: string
            guests:
              type: number
            room:
              type: object
              properties:
                roomType:
                  type: number
                  description: Key is the name of room and value is number of rooms.
        bookingId:
          type: string
        hotelId:
          type: string
        price: 
          type: number
        status:
          type: string
          enum: ['booked', 'reserved']
        timestamp: 
          type: string
        title:
          type: string
          description: 'Hotel Name'

    getBookings:
      type: array
      items:
        $ref: '#/components/schemas/booking'
   
    addBooking:
      type: object
      properties:
        status:
          type: string
          enum: ['booked', 'reserved']
        bookingDetails:
          type: object
          properties:
            bookingName:
              type: string
              description: 'Booking under name'
            guests:
              type: number
              minimum: 1
              example: 1
            room:
              type: object
              properties:
                roomType:
                  type: number
                  minimum: 1
                  example: 1
            check_In:
              type: string
              example: dd/mm/yyyy
            check_Out:
              type: string
              example: dd/mm/yyyy

    editBooking:
      $ref: '#/components/schemas/addBooking'

    hotel:
      type: object
      properties:
        city:
          type: string
          enum: ["Mumbai", "New Delhi", "Tokyo", "Bengaluru", "Dubai", "Hong Kong", "Hyderabad", "Singapore" , "Pune"]
        destinationId: 
          type: string
          description: 'city ID'
        id: 
          type: number
          description: 'hotel ID'
        neighbourhood:
          type: string
          description: 'locality'
        price: 
          type: object
          properties: 
            before_price:
              type: number
            currency:
              type: string
            current_price:
              type: number
            discounted:
              type: boolean
            savings_amount: 
              type: number
            savings_percent:
              type: number
              minimum: 0
              maximum: 100
        rating: 
          type: number
          minimum: 0.0
          maximum: 10.0
        starRating: 
          type: number
          minimum: 0
          maximum: 5
        thumbnail: 
          type: string
          description: 'URL for thumbnail'
        title:
          type: string
          description: 'Hotel Name'
    
    hotelDetails:
      type: object
      required:
        - address
        - checkIn
        - checkOut
        - city
        - description
        - destinationId
        - id
        - main_image
        - mapWidget
        - neighbourhood
        - price
        - rating
        - review
        - rooms
        - starRating
        - title
      properties:
        address:
          type: string
        checkIn:
          type: string
        checkOut:
          type: string
        city:
          type: string
          enum: ["Mumbai", "Delhi", "Tokyo", "Bengaluru", "Dubai", "Hong Kong", "Hyderabad", "Singapore" , "Pune"]
        description:
          type: string
          description: 'gives one line summary of hotel'
        destinationId:
          type: string
          description: 'city ID'
        feature_bullets:
          type: object
          properties:
            Main amenities:
              type: array
              items:
                type: string
            What is arround:
              type: array
              items:
                type: string
          required: [Main amenities, What is arround]
        id:
          type: number
          description: 'Hotel ID'
        main_image:
          type: string
          description: 'URL for main hotel image'
        mapWidget:
          type: string
          description: 'URL for google map image'
        neighbourhood:
          type: string
          description: 'Hotel locality'
        price:
          type: object
          properties:
            before_price:
              type: number
            currency:
              type: string
            current_price:
              type: number
            discounted:
              type: boolean
            savings_amount: 
              type: number
            savings_percent:
              type: number
              minimum: 0
              maximum: 100
        rating:
          type: number
          minimum: 0
          maximum: 10.0
        review: 
          type: array
          items:
            $ref: '#/components/schemas/reviews'
        rooms:
          type: object
          description: 'types of rooms the hotel offers'
          properties:
            'Name of Room':
              type: object
              properties:
                name:
                  description: name of the room
                  type: string
                price:
                  description: price of the room
                  type: number
                maxOccupants:
                  description: number of occupants allowed
                  type: integer
                roomsAvailable:
                  description: number of rooms available
                  type: integer
                roomsBookedOn:
                  description: array
                  items:
                    type: string
                    description: list of all booked dates in dd/mm/yyyy format
                    example: dd/mm/yyyy
        starRating:
          type: number
          maximum: 5
          minimum: 0
        title:
          type: string
          description: 'Hotel Name'
    
    reviews:
      type: object
      properties:
        id:
          type: string
          description: 'user ID'
        name:
          type: string
          description: 'username'
        rating:
          type: number
          minimum: 1.0
          maximum: 10.0
        review:
          type: string
          description: 'Body of review'
        title:
          type: string
          description: 'Title of review'
    
    addReview:
      type: object
      required:
      - rating
      - review
      - title
      properties:
        rating:
          type: number
          minimum: 1.0
          maximum: 10.0
        review:
          type: string
        title:
          type: string
    
    newReview:
      type: object
      required: 
        - reviews
        - rating
      properties:
        rating:
          type: number
          minimum: 1.0
          maximum: 10.0
        reviews:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: 'user ID'
              name:
                type: string
                description: 'username'
              rating:
                type: number
                minimum: 1.0
                maximum: 10.0
              review:
                type: string
                description: 'Body of review'
              title:
                type: string
                description: 'Title of review'
              
