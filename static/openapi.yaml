openapi: 3.0.1
info:
  title: Best of Asia (REST API)
  description: >-
    Backend for an E-Travel Project (Ashoka University) in form of a REST API
    architecture.
  version: 1.0.0

servers:
  - url: 'http://127.0.0.1:5000/'

tags:
  - name: User Endpoints
    description: All User Operations
  - name: Navigation
    description: Navigation routes
  - name: Booking
    description: Booking routes
  - name: Review
    description: Review routes

paths:

  /api/signup:
    post:
      tags: [User Endpoints]
      summary: Register new signup
      description: Creates a new user and sends back the idToken and refreshToken to be used for Bearer Tokens.
      operationId: addUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
                phone_number:
                  type: string
              required:
                - name
                - email
                - password
                - phone_number
      responses:
        '200':
          description: Succesfully added user. Returns access tokens.
          content:
            application/json:
              schema:
                type: object
                properties:
                  idToken:
                    type: string
                  refreshToken:
                    type: string
                required:
                  - idToken
                  - refreshToken
        '400':
          description: Bad Form Input
        '401':
          description: User already exists or Unauthorized

  /api/google-signup:
    put:
      tags: [User Endpoints]
      summary: Add user to DB after Google Signup
      description: Call this route after anyone signs up using Google, in order to register them in the DB.
      operationId: addGUser
      responses:
        '200':
          description: Succesfully added user in DB or user already exists in DB.
      security:
        - Bearer: []

  /api/login:
    post:
      tags: [User Endpoints]
      summary: Login user with email and password (Non-Google)
      description: Logs in user and returns access tokens.
      operationId: login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Succesfully logged in User
          content:
            application/json:
              schema:
                type: object
                properties:
                  idToken:
                    type: string
                  refreshToken:
                    type: string
                required:
                  - idToken
                  - refreshToken
        '400':
          description: Bad Form Input
          content: {}
        '401':
          description: Unauthorized

  /api/logout:
    get:
      tags: [User Endpoints]
      summary: Logout and revoke tokens
      description: Revokes access tokens of user
      operationId: logout
      responses:
        '200':
          description: Succesfully logged out and revoked tokens
      security:
        - Bearer: []

  /api/profile:
    get:
      tags: [User Endpoints]
      summary: View Profile Section
      description: Returns profile details of User
      operationId: viewUser
      responses:
        '200':
          description: Returns Profile
          content:
            application/json:
              schema:
                $ref:  '#/components/schemas/getProfile'
        '401':
          description: Unauthorized
        '404':
          description: User not found
          content: {}
      security:
        - Bearer: []

  /api/profile/:
    patch:
      tags: [User Endpoints]
      summary: Edit Profile Section
      description: Takes in JSON containing edits and sends back entire new profile
      operationId: editUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editProfile'
      responses:
        '200':
          description: Succesfully edited user.
          content:
            application/json:
              schema:
                $ref:  '#/components/schemas/getProfile'
        '400':
          description: Bad JSON Input
          content: {}
        '401':
          description: Unauthorized
      security:
        - Bearer: []
  
  /api/:
    get:
      summary: Homepage data containing name of all cities
      description: Returns an array of all cities and their info.
      operationId: homepage
      tags: [Navigation]
      responses:
        '200':
          description: JSON city data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cities'
  
  /api/search:
    get:
      summary: Searches through all hotel names
      description: Returns array of all hits
      operationId: search
      tags: [Navigation]
      parameters:
        - name: city
          in: query
          required: false
          schema:
            type: string
        - name: q
          in: query
          required: true
          description: search term
          schema:
            type: string
        - name: check_In
          in: query
          required: false
          schema:
            type: string
          description: dd/mm/yyyy
        - name: check_Out
          in: query
          required: false
          schema:
            type: string
          description: dd/mm/yyyy
      
      responses:
        '200':
          description: Array of all search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search'
        '204':
          description: No Matches Found
        '400':
          description: Invalid Search Term
        '404':
          description: No Such City
    
  /api/search/fuzzy:
    get:
      summary: Fuzzy search for search bar
      description: Fast speed search at search bar that returns basic hotel data of hits in an array.
      operationId: fuzzySearch
      tags: [Navigation]
      parameters:
        - name: q
          in: query
          required: true
          description: search term
          schema:
            type: string
        - name: city
          in: query
          required: false
          schema:
            type: string
            enum:
              - Mumbai
              - Delhi
              - Tokyo
              - Bengaluru
              - Dubai
              - Hong Kong
              - Hyderabad
              - Singapore
              - Pune
      responses:
        '200':
          description: Search data returned to be viewed in search bar dropdown.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fuzzySearch'
        '204':
          description: No Matches Found
        '400':
          description: Invalid Search Term
        '404':
          description: No Such City

  /api/search/advanced:
    get:
      summary: Performs advanced search through tags
      description: Give user an option to perform an advanced search and then call this endpoint with the search term
      operationId: advancedSearch
      tags: [Navigation]
      parameters:
        - name: city
          in: query
          required: false
          schema:
            type: string
            enum:
              - Mumbai
              - Delhi
              - Tokyo
              - Bengaluru
              - Dubai
              - Hong Kong
              - Hyderabad
              - Singapore
              - Pune
          
        - name: q
          in: query
          required: true
          description: search term
          schema:
            type: string
        - name: check_In
          in: query
          required: false
          schema:
            type: string
          description: dd/mm/yyyy
        - name: check_Out
          in: query
          required: false
          schema:
            type: string
          description: dd/mm/yyyy
      
      responses:
        '200':
          description: Array of all search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search'
        '204':
          description: No Matches Found
        '400':
          description: Invalid Search Term
        '404':
          description: No Such City
  
  /api/city/{city}:
    get:
      summary: Gets data of all hotels belonging to a city
      description: Takes a city name in the path and returns all hotels in this city. Meant for Users who click on a city on the homepage.
      operationId: cityHotels
      tags: [Navigation]
      parameters:
        - name: city
          in: path
          required: true
          schema:
            type: string
            enum:
              - Mumbai
              - Delhi
              - Tokyo
              - Bengaluru
              - Dubai
              - Hong Kong
              - Hyderabad
              - Singapore
              - Pune
          description: City name
      
      responses:
        '200':
          description: Array of all available hotels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search'
        '404':
          description: No Such City
      
  /api/hotel/{hotelId}:
    get:
      summary: Get complete hotel details on selection
      description: Meant for individual hotel description page
      operationId: getHotel
      tags: [Navigation]
      parameters:
        - name: hotelId
          in: path
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: Hotel details found and returned as JSON
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/hotelDetails'
        '404':
          description: Hotel Not Found

  /api/hotel/{hotelId}/reccomendations:
    get:
      summary: Gets recommendations for selected hotel
      description: Show this in More Like This contianer when User is looking at details of a hotel using its hotelId.
      operationId: getRecc
      tags: [Navigation]
      parameters:
        - name: hotelId
          in: path
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: Recommendations generated and returned as a general search array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search'
        '404':
          description: Hotel Not Found
      
  
  /api/profile/bookings:
    get:
      summary: Gets all bookings of the User
      description: Returns and array of every booking.
      operationId: getBookings
      responses:
        '200':
          description: User booking data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getBookings'
        '401':
          description: Unauthorized
      tags:
        - Booking
    
  /api/profile/bookings/{hotelId}:
    put:
      summary: Add new booking
      description: Takes hotelId from path and JSON of booking details, to return succesfully added booking info.
      operationId: addBooking
      tags: [Booking]
      parameters:
        - name: hotelId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addBooking'

      responses:
        '200':
          description: Booking added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/booking'
        '400':
          description: Input JSON error
        '401':
          description: Unauthorized
        '404':
          description: Hotel not found
  
  /api/profile/bookings/{bookingId}:

    delete:
      summary: Delete booking using booking ID
      operationId: Delete booking
      tags: [Booking]
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
        '401':
          description: Unauthorized

    patch:
      summary: Edit booking using booking ID
      description: 'Takes bookingId from path and a JSON of any edits, to return succesfully edited booking info.'
      operationId: editBooking
      tags: [Booking]
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/editBooking'

      responses:
        '200':
          description: Succesfully edited.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/booking'
        '400':
          description: Input JSON error
        '401':
          description: Unauthorized
      
  /api/hotel/{hotelId}/review:
    put:
      summary: Add a review to a hotel
      description: Takes in hotel ID in path and review info as JSON, to return changed hotel details (new review array and ratings)
      operationId: addReview
      tags: [Review]

      parameters:
        - name: hotelId
          in: path
          required: true
          schema:
            type: string
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addReview'
      
      responses:
        '200':
          description: Review succesfully added to hotel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/newReview'
        '400':
          description: No data sent
        '401':
          description: Unauthorized

components:
  
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
  
  schemas:

    getProfile:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone_number:
          type: string
      required:
        - name
        - email
        - phone_number
    
    editProfile:
      type: object
      properties:
        name:
          type: string
        phone_number:
          type: string

    cities:
      type: object
      properties:
        cityName:
          type: object
          properties:
            destinationId:
                type: string
            name:
                type: string
                enum: ["Mumbai", "New Delhi", "Tokyo", "Bengaluru", "Dubai", "Hong Kong", "Hyderabad", "Singapore" , "Pune"]
            thumbnail:
                type: string
                description: 'URL for thumbnail'
          required:
            - destinationId
            - name
            - thumbnail
    
    search:
      type: array
      items:
        $ref: '#/components/schemas/hotel'

    fuzzySearch:
      type: array
      items:
        type: object
        properties:
          id:
            type: number
          starRating:
            type: number
            maximum: 5
            minimum: 0
          title:
            type: string
            description: 'Hotel Name'
        required:
          - id
          - starRating
          - title
    
    booking:
      type: object
      properties:
        bookingDetails:
          type: object
          properties:
            bookingName:
              type: string
            check_In:
              type: string
            check_Out:
              type: string
            guests:
              type: number
            room:
              type: object
              properties:
                roomType:
                  type: number
                  description: Key is the name of room and value is number of rooms.
        bookingId:
          type: string
        hotelId:
          type: string
        price: 
          type: number
        status:
          type: string
          enum: ['booked', 'cancelled', 'visited', 'favourite']
        timestamp: 
          type: string
        title:
          type: string
          description: 'Hotel Name'

    getBookings:
      type: array
      items:
        $ref: '#/components/schemas/booking'
   
    addBooking:
      type: object
      properties:
        status:
          type: string
          enum: ['booked', 'cancelled', 'visited', 'favourite']
        bookingDetails:
          type: object
          properties:
            bookingName:
              type: string
              description: 'Booking under name'
            guests:
              type: number
              minimum: 1
              example: 1
            room:
              type: object
              properties:
                roomType:
                  type: number
                  minimum: 1
                  example: 1
            check_In:
              type: string
              example: dd/mm/yyyy
            check_Out:
              type: string
              example: dd/mm/yyyy

    editBooking:
      $ref: '#/components/schemas/addBooking'

    hotel:
      type: object
      properties:
        city:
          type: string
          enum: ["Mumbai", "New Delhi", "Tokyo", "Bengaluru", "Dubai", "Hong Kong", "Hyderabad", "Singapore" , "Pune"]
        destinationId: 
          type: string
          description: 'city ID'
        id: 
          type: number
          description: 'hotel ID'
        neighbourhood:
          type: string
          description: 'locality'
        price: 
          type: object
          properties: 
            before_price:
              type: number
            currency:
              type: string
            current_price:
              type: number
            discounted:
              type: boolean
            savings_amount: 
              type: number
            savings_percent:
              type: number
              minimum: 0
              maximum: 100
        rating: 
          type: number
          minimum: 0.0
          maximum: 10.0
        starRating: 
          type: number
          minimum: 0
          maximum: 5
        thumbnail: 
          type: string
          description: 'URL for thumbnail'
        title:
          type: string
          description: 'Hotel Name'
    
    hotelDetails:
      type: object
      required:
        - address
        - checkIn
        - checkOut
        - city
        - description
        - destinationId
        - id
        - main_image
        - mapWidget
        - neighbourhood
        - price
        - rating
        - review
        - rooms
        - starRating
        - title
      properties:
        address:
          type: string
        checkIn:
          type: string
        checkOut:
          type: string
        city:
          type: string
          enum: ["Mumbai", "Delhi", "Tokyo", "Bengaluru", "Dubai", "Hong Kong", "Hyderabad", "Singapore" , "Pune"]
        description:
          type: string
          description: 'gives one line summary of hotel'
        destinationId:
          type: string
          description: 'city ID'
        feature_bullets:
          type: object
          properties:
            Main amenities:
              type: array
              items:
                type: string
            What is arround:
              type: array
              items:
                type: string
          required: [Main amenities, What is arround]
        id:
          type: number
          description: 'Hotel ID'
        main_image:
          type: string
          description: 'URL for main hotel image'
        mapWidget:
          type: string
          description: 'URL for google map image'
        neighbourhood:
          type: string
          description: 'Hotel locality'
        price:
          type: object
          properties:
            before_price:
              type: number
            currency:
              type: string
            current_price:
              type: number
            discounted:
              type: boolean
            savings_amount: 
              type: number
            savings_percent:
              type: number
              minimum: 0
              maximum: 100
        rating:
          type: number
          minimum: 0
          maximum: 10.0
        review: 
          type: array
          items:
            $ref: '#/components/schemas/reviews'
        rooms:
          type: array
          description: 'types of rooms the hotel offers'
          items:
            type: string
        starRating:
          type: number
          maximum: 5
          minimum: 0
        title:
          type: string
          description: 'Hotel Name'
    
    reviews:
      type: object
      properties:
        id:
          type: string
          description: 'user ID'
        name:
          type: string
          description: 'username'
        rating:
          type: number
          minimum: 1.0
          maximum: 10.0
        review:
          type: string
          description: 'Body of review'
        title:
          type: string
          description: 'Title of review'
    
    addReview:
      type: object
      required:
      - rating
      - review
      - title
      properties:
        rating:
          type: number
          minimum: 1.0
          maximum: 10.0
        review:
          type: string
        title:
          type: string
    
    newReview:
      type: object
      required: 
        - reviews
        - rating
      properties:
        rating:
          type: number
          minimum: 1.0
          maximum: 10.0
        reviews:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: 'user ID'
              name:
                type: string
                description: 'username'
              rating:
                type: number
                minimum: 1.0
                maximum: 10.0
              review:
                type: string
                description: 'Body of review'
              title:
                type: string
                description: 'Title of review'
              
